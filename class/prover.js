class Prover extends Character {

    /**
     * Constructor for Character instance.
     * @param {string} name
     * @param {number} id
     * @param {number} center_x
     * @param {number} center_y
     * @param {number} diameter
     * @param {string} color
     * @param {string} verifier_link
     * @param {string} prover_link
     * @param {Object} sketch
     */
    constructor(name, id, center_x, center_y, diameter, color, verifier_link, prover_link, sketch) {
        super(name, id, center_x, center_y, diameter, true, color, [verifier_link, prover_link], sketch);
    }

    /**
     * Method to scan for Verifier requests and emit Prover commitments.
     * @param {RequestInfo[]} requests
     */
    scanForRequests(requests) {
        if (requests.length > 0) {
            for(let i in requests) {
                let request = requests[i];
                // Check if request has reached prove.
                if (this.checkRing2RingCollision(request)) {
                    let commit;
                    // Check if request is user generated
                    if (Prover.isUserRequest(request)) {
                        commit = this.generateCommitFromUserRequest(request, "purple");
                    } else {
                        commit = this.generateCommitFromRequest(request);
                    }
                    // Add commit to queue to be displayed.
                    this.addSingleInformation(commit);
                }
            }
        }
    }

    /**
     * Generate Commit instance from Request information.
     * @param   {RequestInfo} request
     * @returns {CommitInfo}
     */
    generateCommitFromRequest(request) {
        return new CommitInfo("Commit from Request", request.getID(), this.generateCommitValue(request), this.getCenterX(), this.getCenterY(), 0, request.getInformationGrowthRate(), this.getColor(), this.getSketch());
    }

    /**
     * Generate Commit instance from Request information generated by the user.
     * @param   {RequestInfo} request
     * @param   {string}      color
     * @returns {CommitInfo}
     */
    generateCommitFromUserRequest(request, color) {
        return new CommitInfo("Commit from User Request", request.getID(), this.generateCommitValue(request), this.getCenterX(), this.getCenterY(), 0, request.getInformationGrowthRate(), color, this.getSketch());
    }

    /**
     * Know if a Request is generated from User.
     * @param   {RequestInfo} request
     * @returns {boolean}
     */
    static isUserRequest(request) {
        return request.getName() === "User Request";
    }


    /**
     * Generate corresponding Prover commit value from Verifier request.
     * @param   {RequestInfo}   request
     * @returns {Array<number>}
     */
    generateCommitValue(request) {
        //TODO: Write proper implementation of this function.
        let b_i = this.getSketch().random();
        let b_j = this.getSketch().random();
        let com_i = b_i + request.getRequestNodeIVal() * request.getRequestRIVal();
        let com_j = b_j + request.getRequestNodeJVal() * request.getRequestRJVal();
        return [com_i, com_j];
    }


    /**
     * Get Verifier link associated to current Prover instance.
     * @returns {string}
     */
    getVerifierLink() {
        return this.getCharacterLinks()[0];
    }

    /**
     * Get Prover link associated to current Prover instance.
     * @returns {string}
     */
    getProverLink() {
        return this.getCharacterLinks()[1];
    }

    /**
     * Check if Prover is linked to input Prover instance.
     * @param   {Prover} prover
     * @returns {boolean}
     */
    isProverLinked(prover) {
        return this.getProverLink() === prover.getName();
    }

    /**
     * Check if Prover is linked to input Verifier instance.
     * @param   {Verifier} verifier
     * @returns {boolean}
     */
    isVerifierLinked(verifier) {
        return this.getVerifierLink() === verifier.getName();
    }

}